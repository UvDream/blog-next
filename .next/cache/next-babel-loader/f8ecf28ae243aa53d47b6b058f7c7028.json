{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport axios from \"axios\";\nimport config from \"./config.js\"; // 倒入默认配置\n\nexport default function request(options) {\n  return new _Promise((reslove, reject) => {\n    var service = axios.create({\n      baseURL: config.baseURL,\n      timeout: config.timeout,\n      headers: config.headers,\n      withCredentials: config.withCredentials\n    }); // request拦截器\n\n    service.interceptors.request.use(config => {\n      return config;\n    }, error => {\n      return _Promise.reject(error);\n    }); // response拦截器\n\n    service.interceptors.response.use(response => {\n      let data; // IE9\n\n      if (response.data == undefined) {\n        data = response.request.responseText;\n      } else {\n        data = response.data;\n      }\n\n      switch (data.code) {\n        case \"110\":\n          break;\n\n        default:\n      }\n\n      return data;\n    }, err => {\n      if (err.response && err.response.status) {\n        switch (err.response.status) {\n          case 400:\n            err.message = \"请求错误\";\n            break;\n\n          case 401:\n            err.message = \"未授权，请登录\";\n            break;\n\n          case 403:\n            err.message = \"拒绝访问\";\n            break;\n\n          case 404:\n            err.message = `请求地址出错: ${err.response.config.url}`;\n            break;\n\n          case 408:\n            err.message = \"请求超时\";\n            break;\n\n          case 500:\n            err.message = \"服务器内部错误\";\n            break;\n\n          case 501:\n            err.message = \"服务未实现\";\n            break;\n\n          case 502:\n            err.message = \"网关错误\";\n            break;\n\n          case 503:\n            err.message = \"服务不可用\";\n            break;\n\n          case 504:\n            err.message = \"网关超时\";\n            break;\n\n          case 505:\n            err.message = \"HTTP版本不受支持\";\n            break;\n\n          default:\n        }\n      }\n\n      return _Promise.reject(err); //返回错误信息\n    });\n    service(options).then(res => {\n      reslove(res);\n      return res;\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"module"}